# # Github Workflow file

# # Your workflow name.
# name: Deploy to heroku.

# # Run workflow on every push to main branch.
# on:
#   push:
#     branches: [main]

# # Your workflows jobs.
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       # Check-out your repository.
#       - name: Checkout
#         uses: actions/checkout@v2


# ### ⬇ IMPORTANT PART ⬇ ###

#       - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
#         uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
#         with:
#           # Below you must provide variables for your Heroku app.

#           # The email address associated with your Heroku account.
#           # If you don't want to use repository secrets (which is recommended) you can do:
#           # email: my.email@example.com
#           email: ${{ secrets.HEROKU_EMAIL }}
          
#           # Heroku API key associated with provided user's email.
#           # Api Key is available under your Heroku account settings.
#           heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          
#           # Name of the heroku application to which the build is to be sent.
#           heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

#           # (Optional, default: "./")
#           # Dockerfile directory.
#           # For example, if you have a Dockerfile in the root of your project, leave it as follows:
#           dockerfile_directory: ./

#           # (Optional, default: "Dockerfile")
#           # Dockerfile name.
#           dockerfile_name: Dockerfile

#           # (Optional, default: "")
#           # Additional options of docker build command.
#           docker_options: "--no-cache"

#           # (Optional, default: "web")
#           # Select the process type for which you want the docker container to be uploaded.
#           # By default, this argument is set to "web".
#           # For more information look at https://devcenter.heroku.com/articles/process-model
#           process_type: web
          
   
          
# ### ⬆ IMPORTANT PART ⬆ ###








# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to GKE

on:
  push:
    branches:
      - development
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }} # Add your cluster name here.
  GKE_ZONE: ${{ secrets.GKE_ZONE }} # Add your cluster zone here.
  DEPLOYMENT_NAME: python-app
  IMAGE_NAME: python-app

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA"

      # Set up kustomize
      # - name: Set up Kustomize
      #   run: |-
      #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
      #     chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |
          sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' \
                -e 's/PROJECT_ID/'"$PROJECT_ID"'/' \
                -e 's/DEPLOYMENT_NAME/'"$DEPLOYMENT_NAME"'/' \
                -e 's/IMAGE_NAME/'"$IMAGE_NAME"'/' \
                ${{ github.workspace }}/.github/manifests/deployment.yml
          kubectl apply -f ${{ github.workspace }}/.github/manifests/deployment.yml








# # GCP Deployment Workflow file
# env:
#   app-name: simple-hello-world
#   gke-cluster-name: autopilot-cluster-1
#   gke-region: asia-south2

# name: Deploy to GCP

# on:
#   push:
#     branches: [main]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Set up Google Cloud SDK
#         uses: google-github-actions/setup-gcloud@v0.2.0
#         with:
#           version: 'latest'
#           project_id: ${{ secrets.GCP_PROJECT_ID }}
#           service_account_key: ${{ secrets.GCP_SA_KEY }}
#           export_default_credentials: true

#       - name: Configure Docker
#         uses: docker/setup-buildx-action@v1
#         with:
#           driver-opts: image=moby/buildkit:latest

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.app-name }}:$GITHUB_SHA .
#           docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.app-name }}:$GITHUB_SHA

#       - name: Set Kubeconfig for GKE
#         run: |
#           gcloud container clusters get-credentials ${{ env.gke-cluster-name }} --region ${{ env.gke-region }}

#       - name: Deploy to GKE
#         run: |
#           kubectl apply -f kubernetes/deployment.yaml
